scale_x_reverse() +
facet_wrap(~game,ncol = 1) +
geom_dl(aes(y=actual_points,label=team,color=team),list('smart.grid',cex=0.75)) +
theme(legend.position='none') +
ggtitle("Points (Projected and Acutal) by Minutes Remaining") +
ylab("Points") +
xlab("Minutes Remaining")
ann_text <- data.frame(game = rep("Harrington vs. D'Skae",2),
projected_points = c(100,75),
minutes_remaining = c(550,550),
lab = c("Projected","Actual"))
plot2 +
geom_text(data=ann_text,aes(y=projected_points,label=lab,size=2)) +
geom_segment(data=ann_text,aes(x=520,xend=500,y=100,yend=110),arrow=arrow(length = unit(0.1,'cm'))) +
geom_segment(data=ann_text,aes(x=520,xend=500,y=75,yend=65),arrow=arrow(length = unit(0.1,'cm')))
r <- "https://docs.google.com/spreadsheet/pub?key=0ArXHYgdmAzA8dEt4SXNVd2pLdmE0elBxMzNoNm1HZmc&single=true&gid=7&output=csv"
tr <- getURL(r, ssl.verifypeer=FALSE)
regular_season <- read.csv(textConnection(tr),stringsAsFactors=FALSE)
p <- "https://docs.google.com/spreadsheet/pub?key=0ArXHYgdmAzA8dEt4SXNVd2pLdmE0elBxMzNoNm1HZmc&single=true&gid=11&output=csv"
tp <- getURL(p,ssl.verifypeer=FALSE)
playoffs <- read.csv(textConnection(tp),stringsAsFactors=FALSE)
o <- "https://docs.google.com/spreadsheet/pub?key=0ArXHYgdmAzA8dEt4SXNVd2pLdmE0elBxMzNoNm1HZmc&single=true&gid=2&output=csv"
oc <- getURL(o,ssl.verifypeer=FALSE)
owner <- read.csv(textConnection(oc),stringsAsFactors=FALSE)
owner_regular_season <- sqldf('
select
a.*,
b.owner,
b.playoffs,
b.seed,
b.place
from
regular_season as a,
owner as b
where
a.year = b.year
and a.team = b.team')
owner_playoffs <- sqldf('
select
a.*,
b.owner,
b.playoffs,
b.seed,
b.place
from
playoffs as a,
owner as b
where
a.year = b.year
and a.team = b.team')
# check to see it all matched up
sqldf('select
owner,
count(owner)
from
owner_regular_season
group by
owner
order by
2')
sqldf('select
owner,
count(owner)
from
owner_playoffs
group by
owner
order by
2')
## Arrange data and create win, loss and tie variables
data <- arrange(owner_playoffs,game_id,points) %>% filter(year <= 2013)
data$W <- rep(0,dim(data)[1])
data$L <- rep(0,dim(data)[1])
data$T <- rep(0,dim(data)[1])
data$PA <- rep(0,dim(data)[1])
data$opponent <- rep(" ",dim(data)[1])
### Loop to determine winners, and points against
for(i in seq(from=1,to=dim(data)[1],by=2)){
if(data$game[i] != "BYE"){
data$PA[i]   <- data$points[i+1]
data$PA[i+1] <- data$points[i]
data$opponent[i] <- as.character(data$owner[i+1])
data$opponent[i+1] <- as.character(data$owner[i])
if(data$points[i] < data$points[i+1]){
data$L[i] <- 1
data$W[i+1] <- 1
}
if(data$points[i] == data$points[i+1]){
data$T[i] <- 1
data$T[i+1] <- 1
}
}
else { #Here else means they got a BYE
data$W[i] <- 1
data$W[i+1] <- 1
}
}
filter(data,game=="BYE") %>% select(year,points)
View(data)
playoff_records <- data %>%
filter(game %in% c("W1","W2"), is.na(points)==FALSE)
View(playoff_records)
playoff_records <- data %>%
filter(game %in% c("W1","W2"), is.na(points)==FALSE) %>%
group_by(owner) %>%
summarise(wins = sum(W),
losses = sum(L),
record = paste(wins,losses,sep="-")) %>%
arrange(desc(wins))
playoff_records
owner
owner %>% select(owner,playoffs) %>% summarise(playoff_seasons = sum(playoffs))
owner %>% select(owner,playoffs) %>% group_by(owner) %>% summarise(playoff_seasons = sum(playoffs))
data %>% filter(owner == 'Olson') %>% select(year,game_id,opponent,points,PA)
data %>% filter(owner == 'Olson') %>% select(year,game_id,opponent,points,PA,W,L)
playoff_records
View(owner_playoffs)
View(data)
data <- arrange(owner_playoffs,game_id,points) %>% filter(game %in% c("W1","W2"))
data$W <- rep(0,dim(data)[1])
data$L <- rep(0,dim(data)[1])
data$T <- rep(0,dim(data)[1])
data$PA <- rep(0,dim(data)[1])
data$opponent <- rep(" ",dim(data)[1])
data <- arrange(owner_playoffs,game_id,points) %>% filter(game %in% c("W1","W2"))
data$W <- rep(0,dim(data)[1])
data$L <- rep(0,dim(data)[1])
data$T <- rep(0,dim(data)[1])
data$PA <- rep(0,dim(data)[1])
data$opponent <- rep(" ",dim(data)[1])
### Loop to determine winners, and points against
for(i in seq(from=1,to=dim(data)[1],by=2)){
if(data$game[i] != "BYE"){
data$PA[i]   <- data$points[i+1]
data$PA[i+1] <- data$points[i]
data$opponent[i] <- as.character(data$owner[i+1])
data$opponent[i+1] <- as.character(data$owner[i])
if(data$points[i] < data$points[i+1]){
data$L[i] <- 1
data$W[i+1] <- 1
}
if(data$points[i] == data$points[i+1]){
data$T[i] <- 1
data$T[i+1] <- 1
}
}
else { #Here else means they got a BYE
data$W[i] <- 1
data$W[i+1] <- 1
}
}
filter(data,game=="BYE") %>% select(year,points)
## calculate playoff records
playoff_records <- data %>%
filter(game %in% c("W1","W2"), is.na(points)==FALSE) %>%
group_by(owner) %>%
summarise(wins = sum(W),
losses = sum(L),
record = paste(wins,losses,sep="-")) %>%
arrange(desc(wins))
playoff_records
data %>% filter(owner=='Thieneman') %>% select(game_id,opponent,points,PA)
R32014 <- owner_playoffs %>%
filter(year==2014,week=="R3") %>%
select(owner,game_id)
## Now merge with regular season data
round3_preview <- sqldf('
select
a.owner,
a.week,
a.points,
b.game_id
from
owner_regular_season as a,
R32014 as b
where
a.year = 2014
and a.owner = b.owner')
table(round3_preview$game_id)
round3_preview$game <- factor(round3_preview$game_id,
levels <- c("2014R3W1",
"2014R3L3",
"2014R3WC1",
"2014R3L2",
"2014R3WC2",
"2014R3L3"))
round3_preview <- sqldf('
select
a.owner,
a.week,
a.points,
b.game_id
from
owner_regular_season as a,
R32014 as b
where
a.year = 2014
and a.owner = b.owner')
table(round3_preview$game_id)
round3_preview$game <- factor(round3_preview$game_id,
levels <- c("2014R3W1",
"2014R3L3",
"2014R3WC1",
"2014R3L2",
"2014R3WC2",
"2014R3L1"))
levels(round3_preview$game) <- c("Champtionship",
"SAT Bowl",
"3rd Place",
"9th Place",
"5th Place",
"7th Place")
plot3 <- ggplot(data=round3_preview,aes(x=week,y=points,colour=owner))
plot3 +
geom_point() +
geom_line(group=owner) +
facet_wrap(~game,ncol=2) +
ggtitle("Playoffs Round 3 \n Matchup Preview") +
theme(legend.position = 'none') +
geom_dl(aes(label=owner),list('top.bumptwice',cex=0.75)) +
scale_x_continuous("Week",limits = c(1,15)) +
scale_y_continuous("Points",limits = c(50,200))
plot3 +
geom_point() +
geom_line(group=owner) +
facet_wrap(~game,ncol=2) +
ggtitle("Playoffs Round 3 \n Matchup Preview \n 2014 Regular Season") +
theme(legend.position = 'none') +
geom_dl(aes(label=owner),list('top.bumptwice',cex=0.75)) +
scale_x_continuous("Week",limits = c(1,15)) +
scale_y_continuous("Points",limits = c(50,200))
winners_bracket <- owner_playoffs %>%
filter(game %in% c("W1","W2"),owner %in% c("Regan","Harrington"),is.na(points) == FALSE) %>%
arrange(year,week,game)
View(winners_bracket)
data2 <- arrange(owner_regular_season,game_id,points)
data2$W <- rep(0,dim(data2)[1])
data2$L <- rep(0,dim(data2)[1])
data2$T <- rep(0,dim(data2)[1])
data2$PA <- rep(0,dim(data2)[1])
data2$opponent <- rep(" ",dim(data2)[1])
### Loop to determine winners, and points against
for(i in seq(from=1,to=dim(data2)[1],by=2)){
data2$PA[i]   <- data2$points[i+1]
data2$PA[i+1] <- data2$points[i]
data2$opponent[i] <- as.character(data2$owner[i+1])
data2$opponent[i+1] <- as.character(data2$owner[i])
if(data2$points[i] < data2$points[i+1]){
data2$L[i] <- 1
data2$W[i+1] <- 1
}
if(data2$points[i] == data2$points[i+1]){
data2$T[i] <- 1
data2$T[i+1] <- 1
}
}
rivalry_data <- data2 %>%
group_by(owner,opponent) %>%
summarise(wins = sum(W),
losses = sum(L),
ties   = sum(T)) %>%
mutate(record = paste(wins,'-',losses,'-',ties,sep=""))
record_matrix <- dcast(rivalry_data,owner~opponent,value.var='record')
total_games <- data %>%
group_by(owner,opponent) %>%
tally(sort=TRUE)
View(total_games)
View(record_matrix)
playoffs %>% filter(owner_playoffs,year==2014,owner %in% ("Hartman","Ready"))
playoffs %>% filter(owner_playoffs,year==2014,owner %in% c("Hartman","Ready"))
owner_playoffs %>% filter(owner_playoffs,year==2014,owner %in% c("Hartman","Ready"))
owner_playoffs %>% filter(year==2014,owner %in% c("Hartman","Ready"))
owner_playoffs %>% filter(year==2014,owner %in% c("Regan","Hartman"))
owner_playoffs %>% filter(year==2014,owner %in% c("Regan","Harrington"))
owner_playoffs %>% filter(game %in% c("W1","W2"),owner %in% c("Regan","Harrington"))
owner_playoffs %>% filter(game %in% c("W1","W2"),owner %in% c("Hartman","Ready"))
library(XML)
68*69/2
67*68/2
2278*4
sb1 <- sample(c(0,1),1,c(1-.838,.838))
sb1 <- sample(c(0,1),1,c(1-.838,.838),replace=FALSE)
sb1 <- sample(c(0,1),1,c(1-.838,.838),replace=FALSE)
sb1 <- sample(c(0,1),1,c(1-.838,.838),replace=FALSE)
sb1 <- sample(c(0,1),1,c(1-.838,.838),replace=FALSE)
sb1 <- sample(c(0,1),1,c(1-.838,.838),replace=FALSE)
sb1 <- sample(c(0,1),1,c(1-.838,.838),replace=FALSE)
sb36 <- replicate(sample(c(0,1), 1, c(1-.838, .838), replace = FALSE), 10000)
sb38 <- replicate(sample(c(0,1), 1, c(1-.81, .81), replace = FALSE), 10000)
sb39 <- replicate(sample(c(0,1), 1, c(1-.823, .823), replace = FALSE), 10000)
sb42 <- replicate(sample(c(0,1), 1, c(1-.969, .969), replace = FALSE), 10000)
sb46 <- replicate(sample(c(0,1), 1, c(1-.811, .811), replace = FALSE), 10000)
sb36 <- replicate(10000, sample(c(0,1), 1, c(1-.838, .838), replace = FALSE))
sb38 <- replicate(10000, sample(c(0,1), 1, c(1-.81, .81), replace = FALSE))
sb39 <- replicate(10000, sample(c(0,1), 1, c(1-.823, .823), replace = FALSE))
sb42 <- replicate(10000, sample(c(0,1), 1, c(1-.969, .969), replace = FALSE))
sb46 <- replicate(10000, sample(c(0,1), 1, c(1-.811, .811), replace = FALSE))
sb49_a <- replicate(10000, sample(c(0,1), 1, c(1-.785, .785), replace = FALSE))
sb49_b <- replicate(10000, sample(c(0,1), 1, c(1-.998, .998), replace = FALSE))
ne_way <- cbind(sb36, sb38, sb39, sb42, sb46, sb49_a, sb49_b)
library(dplyr)
ne_way <- summarise(ne_way,
sb_wins_a = sum(sb36,sb38,sb39,sb42,sb_46,sb49_a),
sb_wins_b = sum(sb36,sb38,sb39,sb42,sb_46,sb49_b)) %>%
table(ne_way$sb_wins_a)
table(ne_way$sb_wins_b)
ne_way <- summarise(ne_way,
sb_wins_a = sum(sb36,sb38,sb39,sb42,sb_46,sb49_a),
sb_wins_b = sum(sb36,sb38,sb39,sb42,sb_46,sb49_b))
ne_way <- mutate(ne_way,
sb_wins_a = sum(sb36,sb38,sb39,sb42,sb_46,sb49_a),
sb_wins_b = sum(sb36,sb38,sb39,sb42,sb_46,sb49_b))
ne_way <- data.frame(sb36, sb38, sb39, sb42, sb46, sb49_a, sb49_b)
ne_way <- mutate(ne_way,
sb_wins_a = sum(sb36,sb38,sb39,sb42,sb_46,sb49_a),
sb_wins_b = sum(sb36,sb38,sb39,sb42,sb_46,sb49_b))
ne_way <- mutate(ne_way,
sb_wins_a = sum(sb36,sb38,sb39,sb42,sb46,sb49_a),
sb_wins_b = sum(sb36,sb38,sb39,sb42,sb46,sb49_b))
table(ne_way$sb_wins_a)
table(ne_way$sb_wins_b)
View(ne_way)
ne_way <- data.frame(sb36, sb38, sb39, sb42, sb46, sb49_a, sb49_b)
ne_way <- mutate(ne_way,
sb_wins_a = sb36 + sb38 + sb39 + sb42 + sb46 + sb49_a,
sb_wins_b = sb36 + sb38 + sb39 + sb42 + sb46 + sb49_b)
table(ne_way$sb_wins_a)
table(ne_way$sb_wins_b)
table(ne_way$sb_wins_a)/10000
table(ne_way$sb_wins_a)/10000*100
table(ne_way$sb_wins_b)/10000*100
## Opp favor
sb36 <- replicate(10000, sample(c(0,1), 1, c(1-.381, .381), replace = FALSE))
sb38 <- replicate(10000, sample(c(0,1), 1, c(1-.683, .683), replace = FALSE))
sb39 <- replicate(10000, sample(c(0,1), 1, c(1-.823, .823), replace = FALSE))
sb42 <- replicate(10000, sample(c(0,1), 1, c(1-.558, .558), replace = FALSE))
sb46 <- replicate(10000, sample(c(0,1), 1, c(1-.492, .492), replace = FALSE))
sb49_a <- replicate(10000, sample(c(0,1), 1, c(1-.151, .151), replace = FALSE))
sb49_b <- replicate(10000, sample(c(0,1), 1, c(1-.149, .149), replace = FALSE))
opp_way <- data.frame(sb36, sb38, sb39, sb42, sb46, sb49_a, sb49_b)
opp_way <- mutate(ne_way,
sb_wins_a = sb36 + sb38 + sb39 + sb42 + sb46 + sb49_a,
sb_wins_b = sb36 + sb38 + sb39 + sb42 + sb46 + sb49_b)
table(opp_way$sb_wins_a)/10000*100
table(opp_way$sb_wins_b)/10000*100
opp_way <- data.frame(sb36, sb38, sb39, sb42, sb46, sb49_a, sb49_b)
opp_way <- mutate(opp_way,
sb_wins_a = sb36 + sb38 + sb39 + sb42 + sb46 + sb49_a,
sb_wins_b = sb36 + sb38 + sb39 + sb42 + sb46 + sb49_b)
table(opp_way$sb_wins_a)/10000*100
table(opp_way$sb_wins_b)/10000*100
library(ggplot2)
install.packages('ggplot2')
?update.packages
setwd('/home/john/Kaggle/West Nile Virus Prediction/Data')
library(gam)
library(dplyr)
training_final <- read.csv("training_final.csv", stringsAsFactors = FALSE, header = TRUE)
training_final <- training_final %>%
select(cut,
species2,
latitude,
longitude,
avg_may_temp,
num_may_rain,
avg_may_dew,
avg_may_wet,
avg_avg,
avg_min,
avg_max,
avg_dew,
avg_wet,
wet_con,
temp_range,
temp30,
rain14,
dew30,
wet30,
range1,
wnvpresent)
str(training_final)
training_final$species2 <- as.factor(training_final$species2)
training_final$cut <- as.factor(training_final$cut)
### Logistic regression, forward selection variables
forward_model <- glm(data=training_final,
wnvpresent ~ dew30 + avg_may_wet + longitude + species2 + avg_may_temp +
cut + avg_may_dew + avg_dew + range1,
family = 'binomial')
forward_model$coef
table(training_final$species2)
fwd <- c(-486.3,0.204,5.24,-4.677,-0.176,-0.880-14.410,-2.075,-0.047,-0.972,-1.992,0.016,-0.025)
fwd_gam <- c(-473.002,0.216,5.296,-4.539, -0.144,-0.820,-13.409,-2.115,
0.026,-0.984,-2.056,0.018,-0.015)
lasso_gam <- c(-461.558,0.213,0.619,-4.615,-0.137,-0.814,-12.402,NA,
-0.153,-0.954,0.172,NA,NA)
models <- data.frame(fwd,fwd_gam,lasso_gam)
colnames(models) <- c("Forward Logistic","GAM w/ Forward Logistic Variables",
"GAM w/Lasso Variables")
rownames(models) <- c("Intercept","30-Day Dewpoint Average","Average May Wet Bulb",
"Longitude","Pipiens/Restuans","Restuans","Other",
"Average May Temperature","Test day between 1 and 2 sd from average","Test day more than 2 sd from average","Average May dew point","Test day dew point","Previous day temperature range")
dim(fwd)
len(fwd)
length(fwd)
lendth(fwd_game)
l <- function(x){return(length(x))}
l(fwd)
l(fwd_gam)
l(lasso_gam)
fwd <- c(-486.3,0.204,5.24,-4.677,-0.176,-0.880,-14.410,-2.075,-0.047,-0.972,-1.992,0.016,-0.025)
fwd_gam <- c(-473.002,0.216,5.296,-4.539, -0.144,-0.820,-13.409,-2.115,
0.026,-0.984,-2.056,0.018,-0.015)
lasso_gam <- c(-461.558,0.213,0.619,-4.615,-0.137,-0.814,-12.402,NA,
-0.153,-0.954,0.172,NA,NA)
models <- data.frame(fwd,fwd_gam,lasso_gam)
colnames(models) <- c("Forward Logistic","GAM w/ Forward Logistic Variables",
"GAM w/Lasso Variables")
rownames(models) <- c("Intercept","30-Day Dewpoint Average","Average May Wet Bulb",
"Longitude","Pipiens/Restuans","Restuans","Other",
"Average May Temperature","Test day between 1 and 2 sd from average","Test day more than 2 sd from average","Average May dew point","Test day dew point","Previous day temperature range")
models
pander(models, justify = c("right","right","right"), digits = 4,
split.cells = c(30,30,30))
summary(gam_fit_fwd)
setwd('/home/john/Kaggle/West Nile Virus Prediction/Data')
library(gam)
library(dplyr)
training_final <- read.csv("training_final.csv", stringsAsFactors = FALSE, header = TRUE)
training_final <- training_final %>%
select(cut,
species2,
latitude,
longitude,
avg_may_temp,
num_may_rain,
avg_may_dew,
avg_may_wet,
avg_avg,
avg_min,
avg_max,
avg_dew,
avg_wet,
wet_con,
temp_range,
temp30,
rain14,
dew30,
wet30,
range1,
wnvpresent)
str(training_final)
training_final$species2 <- as.factor(training_final$species2)
training_final$cut <- as.factor(training_final$cut)
gam_fit_fwd = gam(as.factor(wnvpresent)~ cut + species2 + s(longitude,df=5) +
s(avg_may_dew,df=5) + s(avg_may_wet,df=5) + s(dew30, df=5) +
s(avg_may_temp,df=5) + s(avg_dew, df=5) + s(range1, df=5),
family = binomial ,
data = training_final)
gam_fit_fwd$coef
summary(gam_fit_fwd)
gam_fit_lasso = gam(as.factor(wnvpresent)~ cut + species2 + s(longitude,df=5) +
s(avg_may_dew,df=5) + s(avg_may_wet,df=5) + s(dew30, df=5),
family = binomial ,
data = training_final)
gam_fit_lasso$coef
summary(gam_fit_lasso)
summary(gam_fit_fwd)
training_final <- training_final %>%
select(cut,
species2,
latitude,
longitude,
avg_may_temp,
num_may_rain,
avg_may_dew,
avg_may_wet,
avg_avg,
avg_min,
avg_max,
avg_dew,
avg_wet,
wet_con,
temp_range,
temp30,
rain14,
dew30,
wet30,
range1,
wnvpresent)
str(training_final)
training_final$species2 <- as.factor(training_final$species2)
training_final$cut <- as.factor(training_final$cut)
### Logistic regression, forward selection variables
forward_model <- glm(data=training_final,
wnvpresent ~ dew30 + avg_may_wet + longitude + species2 + avg_may_temp +
cut + avg_may_dew + avg_dew + range1,
family = 'binomial')
forward_model$coef
gam_fit_lasso = gam(as.factor(wnvpresent)~ cut + species2 + s(longitude,df=5) +
s(avg_may_dew,df=5) + s(avg_may_wet,df=5) + s(dew30, df=5),
family = binomial ,
data = training_final)
gam_fit_lasso$coef
exp(0.6192544)
exp(5)
forward_model <- glm(data=training_final,
wnvpresent ~ dew30 + avg_may_wet + longitude + species2 + avg_may_temp +
cut + avg_may_dew + avg_dew + range1,
family = 'binomial')
forward_model$coef
plot(fam_fit_lasso)
plot(gam_fit_lasso)
